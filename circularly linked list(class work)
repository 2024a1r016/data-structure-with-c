#include <stdio.h> //lab exp 9    date : 10th april
struct Node {
    int data;
    struct Node* next;       
};
struct Node* head = NULL;
struct Node* createNode(int ele) {
    struct Node* temp= (struct Node*)malloc(sizeof(struct Node));
    temp->data = ele;
    temp->next = NULL;
    return temp;
}
void insertNodeInBeginning(int ele) {
    struct Node* newNode=createNode(ele);
    if(head==NULL){
        head = newNode;
        head->next = head;
    }
    else{
        newNode->next=head;
        struct Node* temp=head;
        while(temp->next!=head){
            temp=temp->next;
        }
        temp->next=newNode;
        head=newNode;
    }
        printf("Node Inserted!!!\n");
    }
void insertNodeAtEnd(int ele) {
    struct Node* newNode = CreateNode (ele);
    if (head == NULL) {
        head = newNode;
        head->next=head;
    } 
    else {
        struct Node* temp = head;
        while (temp->next !=head){
            temp = temp->next;
    }
    temp->next=newNode;
    newNode->next=head;
}
    printf("Node Inserted!!!\n");
}
void insertNodeInAnyPosition(int pos, int ele) {
    if(head==NULL)
    printf("List is empty!!\n");
  else if (pos == 1) {
        insertNodeInBeginning(ele);
    }
    struct Node* temp = head;
    int i = 1;
    while (i<pos-1 && temp->next!= head) {
        temp = temp->next;
        i++;
    }
    if (temp->next!= head && pos<0) {
        struct Node* newNode=createNode(ele);
       newNode->next = temp->next;
        temp->next = newNode;
        printf("Node Inserted!!!\n");
    } else {
        printf("Invalid Position\n");
    }
}
void deleteNodeFromBeginning() {
    if (head == NULL) 
    printf("List is empty!");
    else if(head->next=head){
        struct Node *temp=head;
        head=NULL;
        free (temp);
    }   
    else{
        struct Node *temp=head;
        while(temp->next!=head){
            temp=temp->next;
        }
        struct Node* t=head;
        head=head->next;
        temp->next=head;
        free(t);
        printf("Node Deleted!!\n");
    }
}
void deleteNodeFromAnyPos(int pos){
    if(head==NULL)
    printf("List is empty!!\n");
else if(pos==1)
deleteNodeFromBeg();
else{
    struct Node* temp=head;
    int i=1;
    while(i<pos-1 && temp->next!=head){
        i++;
        temp=temp->next;
    }
    if(temp->next!=head && pos>0){
        struct Node *t =temp->next;
        temp->next = temp->next->next;
        free(t);
        printf("Node Deleted!!\n");
    }
    else
    printf("Invalid Position!!\n");
    }
}
void search(int target){
    if(head==NULL)
    printf("list is empty!!\n");
}
void deleteNodeFromEnd() {
    if (head == NULL) 
        printf("List is empty!");
        else if(head->next==head) {
            struct Node* temp = head;
            head=NULL;
            free(temp);
        }
    else { //if list contain more then 1
struct Node *temp=head;
while(temp->next->next!=head){
temp=temp->next;
}
struct Node *t=temp->next;
temp->next=head;
free(t);
    printf("Node Deleted!!!\n");
}
}
void deleteNodeFromAnyPosition(int position) {
    if (head == NULL) {
        printf("List is empty! Deletion is not possible\n");
        return;
    }

    if (position == 1) {
        deleteNodeFromBeginning();
        return;
    }

    struct Node* temp = head;
    int i = 1;
    while (i < position && temp != NULL) {
        temp = temp->next;
        i++;
    }

    if (temp != NULL) {
        if (temp->next != NULL)
        free(temp);
        printf("Node Deleted\n");
    } else {
        printf("Invalid Position\n");
    }
}
void searchElement(int target) {
    if(head==NULL)
    printf("List is empty!11\n");
    else{
    struct Node *temp = head;
    do{
        if (temp->data == target) {
            printf("Found!!!!\n");
            return;
        }
        temp = temp->next;
    }
        while(temp != head);
    printf("Element not found!!!\n");
}
    }
void displayList() {
    if (head == NULL) 
        printf("List is empty\n");
      else{
struct Node *temp=head;
    printf("List elements are: ");
  do {
        printf("%d ", temp->data);
        temp = temp->next;
    }
    while (temp != head);
}
}
int main() {
    while (1) {
        printf("----------------------------------------\n");
        printf("| **Circularly Linked List Operations**    |\n");
        printf("----------------------------------------\n");
        printf("|  1. Insert Node at Beginning         |\n");
        printf("|  2. Insert Node at End               |\n");
        printf("|  3. Insert Node at Any Position      |\n");
        printf("|  4. Delete Node from Beginning       |\n");
        printf("|  5. Delete Node from End             |\n");
        printf("|  6. Delete Node from Any Position    |\n");
        printf("|  7. Search Element                   |\n");
        printf("|  8. Display List                     |\n");
        printf("|  9. Exit                             |\n");
        printf("----------------------------------------\n");
        int choice, element, position;
        printf("Enter your choice: ");
        scanf("%d", &choice);
        switch (choice) {
            case 1:
                printf("Enter element: ");
                scanf("%d", &element);
                insertNodeAtBeginning(element);
                break;
            case 2:
                printf("Enter element: ");
                scanf("%d", &element);
                insertNodeAtEnd(element);
                break;
            case 3:
                printf("Enter element: ");
                scanf("%d", &element);
                printf("Enter position: ");
                scanf("%d", &position);
                insertNodeAtAnyPosition(position, element);
                break;
            case 4:
                deleteNodeFromBeginning();
                break;
            case 5:
                deleteNodeFromEnd();
                break;
            case 6:
                printf("Enter position: ");
                scanf("%d", &position);
                deleteNodeFromAnyPosition(position);
                break;
            case 7:
                printf("Enter element to search: ");
                scanf("%d", &element);
                searchElement(element);
                break;
            case 8:
                displayList();
                break;
            case 9:
                exit(0);
            default:
                printf("Invalid choice\n");
        }
        system("pause");
    }
    return 0;
}
